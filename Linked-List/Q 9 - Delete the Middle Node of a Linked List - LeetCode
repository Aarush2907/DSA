https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/description/

Code :
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* findMiddle(ListNode* head){
        ListNode* fast = head;
        ListNode* slow = head;

        while(fast != NULL && fast -> next != NULL){
            fast = fast -> next -> next;
            slow = slow->next;
        }
        return slow;
    }
    ListNode* deleteMiddle(ListNode* head) {
        if(head -> next == NULL){
            return NULL;
        }
        ListNode* middle = findMiddle(head);

        ListNode* temp = head;

        while(temp -> next != middle){
            temp = temp->next;
        }

        temp -> next = middle -> next;

        delete middle;

        return head;
    }
};
